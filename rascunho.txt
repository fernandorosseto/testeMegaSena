//-----------------------------------------------------------------------

// const url =
//   "https://docs.google.com/spreadsheets/d/e/2PACX-1vRYOEs4QM-0kKjx1NPpj9LfAHWcNGSikmC5EKSBs9NUkZCG8usYOcz5bjelCJRhEUBtvFlSAr8nRDv5/pub?gid=0&single=true&output=csv";

// async function planilhaDb() {
//   const response = await fetch(url);
//   const data = await response.text();
//   const planilhaData = Papa.parse(data, { header: true }).data;

//   // console.log(planilhaData);
// }

// planilhaDb();

//---------------------------------------------------------------------
const urlPagina2 =
  "https://docs.google.com/spreadsheets/d/e/2PACX-1vRYOEs4QM-0kKjx1NPpj9LfAHWcNGSikmC5EKSBs9NUkZCG8usYOcz5bjelCJRhEUBtvFlSAr8nRDv5/pub?gid=1007340004&single=true&output=csv";

//página4 para testes
//https://docs.google.com/spreadsheets/d/1w6Mk0vAPOE35N91CdO8XinDkDrGAVjO-0JLkAtEn_us/edit#gid=4064556

let grupos;

async function frequenciaNumeros() {
  const response = await fetch(urlPagina2);
  const data = await response.text();
  const pagina2Data = Papa.parse(data, { header: false }).data;

  grupos = Array.from({ length: 10 }, () => []);
  let grupoIndex = 0;
  let quantidadeAtual = null;

  const numerosOrdenados = pagina2Data.sort(
    (a, b) => parseInt(b[1]) - parseInt(a[1])
  );

  console.log(numerosOrdenados);

  numerosOrdenados.forEach((row, i) => {
    const numero = parseInt(row[0]);
    const quantidade = parseInt(row[1]);

    let tamanhoDoGrupo = grupos[grupoIndex].length;

    const quantidadeDaProximaIteracao = parseInt(
      numerosOrdenados[i + 1]?.[1] || 0
    );
    const quantidadeDaProximaIteracao2 = parseInt(
      numerosOrdenados[i + 2]?.[1] || 0
    );

    const quantidadeDaProximaIteracao3 = parseInt(
      numerosOrdenados[i + 3]?.[1] || 0
    );

    if (grupoIndex < grupos.length) {
      grupos[grupoIndex].push(numero);
      console.log(grupos[grupoIndex]);
    }

    if (tamanhoDoGrupo >= 5 && quantidade !== quantidadeDaProximaIteracao) {
      grupoIndex += 1;
    }
    if (
      tamanhoDoGrupo === 4 &&
      quantidadeDaProximaIteracao === quantidadeDaProximaIteracao2
    ) {
      grupoIndex += 1;
    }

    // if (
    //   tamanhoDoGrupo === 3 &&
    //   quantidade === quantidadeDaProximaIteracao &&
    //   quantidadeDaProximaIteracao2 === quantidadeDaProximaIteracao3
    // ) {
    //   grupoIndex += 1;
    // }

    quantidadeAtual = quantidade;
  });

  console.log(grupos);
}

frequenciaNumeros();

// async function execute() {
//   await frequenciaNumeros();

//   // Função para gerar as combinações dos grupos
//   function generateCombinations(groups, limit) {
//     const result = [];
//     const indices = new Array(groups.length).fill(0);
//     let count = 0;

//     while (true) {
//       const combination = indices.map((groupIndex, numberIndex) => {
//         const group = groups[numberIndex];
//         return group && group[groupIndex];
//       });

//       result.push(combination);
//       count++;

//       let i = 0;
//       while (
//         i < groups.length &&
//         ++indices[i] === (groups[i] ? groups[i].length : 0)
//       ) {
//         indices[i++] = 0;
//       }

//       if (i === groups.length || count === limit) {
//         break;
//       }
//     }

//     return result;
//   }

//   // Defina os grupos escolhidos pelo usuário
//   const gruposEscolhidos = [grupos[1], grupos[1], grupos[2]];
//   // Gere as combinações limitando a 30 jogos
//   // Remover grupos duplicados
//   const gruposUnicos = Array.from(new Set(gruposEscolhidos));

//   // Remover combinações duplicadas
//   const combUnique = gruposUnicos.reduce(
//     (acc, grupo) =>
//       acc.filter((comb) => !grupo.some((num) => comb.includes(num))),
//     generateCombinations(gruposUnicos, Infinity)
//   );

//   // Limitar a 30 jogos
//   const limiteDeJogos = 30;
//   const todasAsCombinacoes = combUnique.slice(0, limiteDeJogos);

//   // Exiba as combinações no console
//   todasAsCombinacoes.forEach((combination, index) => {
//     console.log(`Jogo ${index + 1}: ${combination.join(", ")}`);
//   });
// }

// execute();
