//-----------------------------------------------------------------------
document.addEventListener("DOMContentLoaded", function () {
  // Seu código aqui
  const url =
    "https://docs.google.com/spreadsheets/d/e/2PACX-1vRYOEs4QM-0kKjx1NPpj9LfAHWcNGSikmC5EKSBs9NUkZCG8usYOcz5bjelCJRhEUBtvFlSAr8nRDv5/pub?gid=0&single=true&output=csv";

  async function planilhaDb() {
    const response = await fetch(url);
    const data = await response.text();
    const planilhaData = Papa.parse(data, { header: true }).data;

    // console.log(planilhaData);
  }

  planilhaDb();

  //---------------------------------------------------------------------
  const urlPagina2 =
    "https://docs.google.com/spreadsheets/d/e/2PACX-1vRYOEs4QM-0kKjx1NPpj9LfAHWcNGSikmC5EKSBs9NUkZCG8usYOcz5bjelCJRhEUBtvFlSAr8nRDv5/pub?gid=1007340004&single=true&output=csv";

  //página4 para testes
  //gid pag2 1007340004
  //gid pag4 4064556
  let pagina2Data;
  let resultadoGrupos;
  let gruposFrequencia;
  let numerosExcluir;

  async function frequenciaNumeros() {
    const response = await fetch(urlPagina2);
    const data = await response.text();
    pagina2Data = Papa.parse(data, { header: false }).data;

    //console.log(pagina2Data);

    function distribuirDezenas(data) {
      // Ordenar as dezenas por frequência de forma decrescente
      const sortedData = data.sort((a, b) => b[1] - a[1]);

      // Inicializar os grupos
      gruposFrequencia = Array.from({ length: 10 }, () => []);

      // Distribuir as dezenas nos grupos de forma decrescente e mantendo ordem dentro de cada grupo
      let grupoIndex = 0;
      for (let i = 0; i < sortedData.length; i++) {
        const grupoAtual = gruposFrequencia[grupoIndex];

        // Verificar se o grupo já contém elementos
        if (grupoAtual.length >= 5) {
          // Se o grupo já tiver 6 ou mais elementos, mudar para o próximo grupo
          grupoIndex = (grupoIndex + 1) % 10;
        }

        // Inserir dezena no grupo
        grupoAtual.push(sortedData[i][0]);
      }

      // Verificar quais números do grupo atual têm a mesma quantidade que os números do próximo grupo
      for (let i = 0; i < gruposFrequencia.length - 1; i++) {
        const grupoAtual = gruposFrequencia[i];
        const proximoGrupo = gruposFrequencia[i + 1];

        const numerosIguais = grupoAtual.filter((numAtual) => {
          const quantidadeAtual = sortedData.find(
            (item) => item[0] === numAtual
          )[1];
          return proximoGrupo.some((numProximo) => {
            const quantidadeProximo = sortedData.find(
              (item) => item[0] === numProximo
            )[1];
            return quantidadeAtual === quantidadeProximo;
          });
        });

        if (numerosIguais.length > 0) {
          const numerosIguaisDoProximoGrupo = proximoGrupo.filter(
            (numProximo) => {
              const quantidadeProximo = sortedData.find(
                (item) => item[0] === numProximo
              )[1];
              return numerosIguais.some((numAtual) => {
                const quantidadeAtual = sortedData.find(
                  (item) => item[0] === numAtual
                )[1];
                return quantidadeAtual === quantidadeProximo;
              });
            }
          );

          const mensagem = `Os números ${numerosIguais.join(", ")} do grupo ${
            i + 1
          } têm a mesma quantidade dos números ${numerosIguaisDoProximoGrupo.join(
            ", "
          )} do grupo ${i + 2}`;
          //console.log(mensagem);
        }

        // Mover os números iguais para o próximo grupo
        numerosIguais.forEach((num) => {
          const indexNoGrupoAtual = grupoAtual.indexOf(num);
          grupoAtual.splice(indexNoGrupoAtual, 1);
          proximoGrupo.push(num);
        });
        proximoGrupo.sort((a, b) => {
          const frequenciaA = sortedData.find((item) => item[0] === a)[1];
          const frequenciaB = sortedData.find((item) => item[0] === b)[1];
          // Ordenar por quantidade (decrescente)
          if (frequenciaB !== frequenciaA) {
            return frequenciaB - frequenciaA;
          }
          // Se a quantidade for a mesma, ordenar por número (decrescente)
          return b - a;
        });
      }

      return gruposFrequencia;
    }

    resultadoGrupos = distribuirDezenas(pagina2Data);
    //console.log(resultadoGrupos);
  }
  frequenciaNumeros();

  //   function produtoCartesianoLimite(limite, ...conjuntos) {
  //     const resultado = conjuntos.reduce(
  //       (acumulador, conjuntoAtual) => {
  //         const novoAcumulador = [];
  //         acumulador.forEach((elementoAcumulado) => {
  //           conjuntoAtual.forEach((elementoConjuntoAtual) => {
  //             const novaCombinação = [
  //               ...elementoAcumulado,
  //               elementoConjuntoAtual,
  //             ];
  //             if (!temDoisNumerosIguais(novaCombinação)) {
  //               novoAcumulador.push(novaCombinação);
  //             }
  //           });
  //         });
  //         return novoAcumulador;
  //       },
  //       [[]]
  //     );

  //     // Retorna resultado.slice(0, limite) se resultado for uma array, caso contrário, retorna uma array vazia
  //     return Array.isArray(resultado) ? resultado.slice(0, limite) : [];
  //   }

  function produtoCartesiano(...conjuntos) {
    return conjuntos.reduce(
      (acumulador, conjuntoAtual) => {
        const novoAcumulador = [];
        acumulador.forEach((elementoAcumulado) => {
          conjuntoAtual.forEach((elementoConjuntoAtual) => {
            const novaCombinação = [
              ...elementoAcumulado,
              elementoConjuntoAtual,
            ];
            // Verifica se há pelo menos dois números iguais na nova combinação
            if (!temDoisNumerosIguais(novaCombinação)) {
              novoAcumulador.push(novaCombinação);
            }
          });
        });
        return novoAcumulador;
      },
      [[]]
    );
  }

  // Função para verificar se há pelo menos dois números iguais em uma array
  function temDoisNumerosIguais(array) {
    const conjuntoUnico = new Set(array);
    return array.length !== conjuntoUnico.size;
  }

  function obterLetraDoIndice(indice) {
    return String.fromCharCode("A".charCodeAt(0) + indice);
  }

  function excluirArraysComNumerosEspecificos(resultado, numerosExcluir) {
    if (!Array.isArray(resultado)) {
      console.error("O resultado não é uma array");
      return [];
    }

    const resultadoGruposExcluidos = resultado.filter((grupo) => {
      const numerosNoGrupo = gruposFrequencia.filter((numero) => {
        return numerosExcluir.includes(numero);
      });
      console.log("numerosNoGrupo:", numerosNoGrupo);

      return numerosNoGrupo.length === 0;
    });

    return resultadoGruposExcluidos;
  }

  async function execute() {
    await frequenciaNumeros();
    //console.log("inicio função execute");

    function obterNumerosExcluir() {
      const numerosExcluirInput = document.getElementById("excluirJogos");

      // Verifica se o elemento existe antes de acessar a propriedade value
      if (numerosExcluirInput) {
        const numerosExcluirTexto = numerosExcluirInput.value;

        // Verifica se a string não está vazia antes de dividir
        if (numerosExcluirTexto.trim() !== "") {
          // Divida a entrada do usuário em uma matriz de números
          const numerosExcluirArray = numerosExcluirTexto
            .split(",")
            .map((numero) => parseInt(numero.trim(), 10))
            .filter((numero) => !isNaN(numero));

          return numerosExcluirArray;
        }
      }

      // Se o elemento não existe ou a string está vazia, retorna uma matriz vazia
      return [];
    }

    function exibirGrupos() {
      const divGrupoFrequencia = document.getElementById("grupoFrequencia");
      divGrupoFrequencia.innerHTML = "";

      // Cria uma tabela
      const tabela = document.createElement("table");

      // Adiciona os grupos à tabela
      resultadoGrupos.forEach((grupo, indice) => {
        const row = tabela.insertRow(-1);

        // Adiciona o número do grupo em uma célula
        const cellGrupo = row.insertCell(0);
        cellGrupo.style.overflow = "hidden";
        cellGrupo.textContent = `Grupo ${obterLetraDoIndice(indice)}`;

        // Adiciona cada número do grupo em células individuais
        grupo.forEach((numero) => {
          const cellNumero = row.insertCell(-1);
          cellNumero.textContent = numero;
          cellNumero.style.overflow = "hidden";

          // Adiciona evento de duplo clique para mostrar a quantidade da frequência
          cellNumero.addEventListener("dblclick", () => {
            const quantidadeFrequencia = obterQuantidadeFrequencia(numero);
            cellNumero.textContent = quantidadeFrequencia;

            // Atrasa a troca de volta ao número original em 1000 milissegundos (1 segundo)
            setTimeout(() => {
              cellNumero.textContent = numero;
            }, 1000);
          });
        });
      });

      // Adiciona a tabela ao elemento divGrupoFrequencia
      divGrupoFrequencia.appendChild(tabela);
    }

    function obterQuantidadeFrequencia(numero) {
      const item = pagina2Data.find((item) => item[0] === numero);
      return item ? item[1] : 0;
    }

    exibirGrupos();

    function obterGruposPeloInput() {
      const primeiroGrupo = document
        .getElementById("primeiroGrupo")
        .value.toUpperCase();
      const segundoGrupo = document
        .getElementById("segundoGrupo")
        .value.toUpperCase();
      const terceiroGrupo = document
        .getElementById("terceiroGrupo")
        .value.toUpperCase();
      const quartoGrupo = document
        .getElementById("quartoGrupo")
        .value.toUpperCase();
      const quintoGrupo = document
        .getElementById("quintoGrupo")
        .value.toUpperCase();
      const sextoGrupo = document
        .getElementById("sextoGrupo")
        .value.toUpperCase();

      return [
        primeiroGrupo,
        segundoGrupo,
        terceiroGrupo,
        quartoGrupo,
        quintoGrupo,
        sextoGrupo,
      ];
    }

    const btnEnviar = document.getElementById("btnEnviar");
    btnEnviar.addEventListener("click", function () {
      calcularProdutoCartesiano();
    });

    function calcularProdutoCartesiano() {
      const gruposSelecionados = obterGruposPeloInput();

      // Obter números a serem excluídos
      numerosExcluir = obterNumerosExcluir();
      console.log(
        "numerosExcluir dentro de calcularProdutoCartesiano:",
        numerosExcluir
      );

      // Mapeia as letras dos grupos para os arrays correspondentes
      const arraysSelecionados = gruposSelecionados.map((letra) =>
        gruposFrequencia[letra.charCodeAt(0) - "A".charCodeAt(0)].sort(
          (a, b) => a - b
        )
      );

      // Chama a função produtoCartesiano com os arrays correspondentes aos grupos
      const resultado = produtoCartesiano(...arraysSelecionados) || [];
      console.log("resultado antes da exclusão:", resultado);

      const resultadoGruposExcluidos = excluirArraysComNumerosEspecificos(
        resultado,
        numerosExcluir
      );
      console.log("resultado após a exclusão:", resultadoGruposExcluidos);

      // Exibe o resultado na div com o id "resultado"
      const divResultado = document.getElementById("resultado");
      divResultado.textContent = `Resultado: ${resultadoGruposExcluidos.join(
        ", "
      )}`;
      console.log(resultadoGruposExcluidos);
    }
  }
  execute();
});



gruposCorrelacionads 

A: (7) ['10', '53', '5', '37', '23', '34', Array(7)]
B: (6) ['33', '30', '41', '32', '35', Array(6)]
C: (6) ['44', '42', '38', '4', '17', '28']
D: (5) ['56', '27', '43', '29', '11']
[[Prototype]]
: 
Object
scripts.js:341 gruposCorrelacionadosReorganizados 
{0: Array(7), 1: Array(6), 2: Array(6), 3: Array(5)}
scripts.js:350 grupo para Processamento 
{A: Array(5), B: Array(6), C: Array(6), D: Array(5)}
A
: 
(5) ['53', '5', '37', '23', '34']
B
: 
(6) ['33', '30', '41', '32', '35', Array(6)]
C
: 
(6) ['44', '42', '38', '4', '17', '28']
D
: 
(5) ['56', '27', '43', '29', '11']
[[Prototype]]
: 
Object